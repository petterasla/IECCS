########################################################################################
MultinomialNB()
########################################################################################
parameters:
{'vect__analyzer': ['word', 'char'], 'vect__ngram_range': [(1, 1), (1, 2), (1, 3), (2, 3), (3, 3)], 'clf__fit_prior': [True, False], 'tfidf__use_idf': (True, False), 'vect__stop_words': [None, 'english'], 'vect__max_features': (None, 50000), 'clf__alpha': array([ 0.1       ,  0.17782794,  0.31622777,  0.56234133,  1.        ])}
Done in 17448.606s
Best score: 0.524
Best parameters set:
	clf__alpha: 0.10000000000000001
	clf__fit_prior: False
	tfidf__use_idf: True
	vect__analyzer: 'word'
	vect__max_features: 50000
	vect__ngram_range: (2, 3)
	vect__stop_words: 'english'

Feature used:
['count-vect']
Start crunching. Time used: 0.1 minutes
================================================================================
MultinomialNB(alpha=0.1, class_prior=None, fit_prior=False)
dev = 5329
Val = 0.5487
Test = 0.5885
Count-vec = ngram(1, 1), stopwords='english', max=50000

########################################################################################
BernoulliNB()
########################################################################################
{'vect__analyzer': ['word', 'char'], 'vect__ngram_range': [(1, 1), (1, 2), (1, 3), (2, 3), (3, 3)], 'clf__fit_prior': [True, False], 'tfidf__use_idf': (True, False), 'vect__stop_words': [None, 'english'], 'vect__max_features': (None, 50000), 'clf__alpha': array([ 0.1       ,  0.17782794,  0.31622777,  0.56234133,  1.        ])}
Done in 17125.058s
Best score: 0.547
Best parameters set:
	clf__alpha: 0.10000000000000001
	clf__fit_prior: True
	tfidf__use_idf: True
	vect__analyzer: 'char'
	vect__max_features: None
	vect__ngram_range: (2, 3)
	vect__stop_words: None


########################################################################################
LinearSVM()
########################################################################################
parameters:
{'vect__analyzer': ['word', 'char'], 'vect__ngram_range': [(1, 1), (1, 2), (1, 3), (2, 3), (3, 3)], 'tfidf__use_idf': (True, False), 'vect__stop_words': [None, 'english'], 'clf__C': array([   0.1       ,    0.16378937,    0.26826958,    0.43939706,
          0.71968567,    1.17876863,    1.93069773,    3.16227766,
          5.17947468,    8.48342898,   13.89495494,   22.75845926,
         37.2759372 ,   61.05402297,  100.        ]), 'vect__max_features': (None, 50000)}
Done in 40663.929s
Best score: 0.511
Best parameters set:
	clf__C: 1.17876863
	tfidf__use_idf: False
	vect__analyzer: 'word'
	vect__max_features: None
	vect__ngram_range: (1, 2)
	vect__stop_words: None


########################################################################################
SGDClassifier()
########################################################################################
{'vect__analyzer': ['word', 'char'], 'vect__ngram_range': [(1, 1), (1, 2), (1, 3), (2, 3), (3, 3)], 'clf__loss': ['modified_huber', 'squared_hinge', 'perceptron'], 'tfidf__use_idf': (True, False), 'vect__stop_words': [None, 'english'], 'vect__max_features': (None, 50000), 'clf__alpha': [0.0001, 0.001, 0.01]}
Done in 16423.690s
Best score: 0.546
Best parameters set:
	clf__alpha: 0.0001
	clf__loss: 'squared_hinge'
	tfidf__use_idf: True
	vect__analyzer: 'char'
	vect__max_features: None
	vect__ngram_range: (1, 3)
	vect__stop_words: 'english'


########################################################################################
SVM()
########################################################################################
parameters:
{'vect__analyzer': ['word', 'char'], 'vect__ngram_range': [(1, 1), (1, 2), (1, 3), (2, 3), (3, 3)], 'tfidf__use_idf': (True, False), 'vect__stop_words': [None, 'english'], 'clf__C': array([   0.1       ,    0.16378937,    0.26826958,    0.43939706,
          0.71968567,    1.17876863,    1.93069773,    3.16227766,
          5.17947468,    8.48342898,   13.89495494,   22.75845926,
         37.2759372 ,   61.05402297,  100.        ]), 'vect__max_features': (None, 50000), 'clf__kernel': ['linear']}
Done in 209329.806s
Best score: 0.551
Best parameters set:
	clf__C: 5.1794746792312099
	clf__kernel: 'linear'
	tfidf__use_idf: False
	vect__analyzer: 'word'
	vect__max_features: None
	vect__ngram_range: (1, 1)
	vect__stop_words: 'english'



########################################################################################
Logistic Regression()
########################################################################################
parameters:
{'vect__analyzer': ['word', 'char'], 'vect__ngram_range': [(1, 1), (1, 2), (1, 3), (2, 3), (3, 3)], 'tfidf__use_idf': (True, False), 'clf__solver': ['newton-cg', 'lbfgs'], 'vect__stop_words': [None, 'english'], 'clf__penalty': ['l2'], 'clf__C': array([   0.1       ,    0.16378937,    0.26826958,    0.43939706,
          0.71968567,    1.17876863,    1.93069773,    3.16227766,
          5.17947468,    8.48342898,   13.89495494,   22.75845926,
         37.2759372 ,   61.05402297,  100.        ]), 'vect__max_features': (None, 50000)}
Done in 275106.655s
Best score: 0.511
Best parameters set:
	clf__C: 22.758459260747887
	clf__penalty: 'l2'
	clf__solver: 'lbfgs'
	tfidf__use_idf: True
	vect__analyzer: 'word'
	vect__max_features: None
	vect__ngram_range: (1, 3)
	vect__stop_words: None